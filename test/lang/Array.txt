namespace lang;

public class Array<T> : List<T> {

    private final int length;
    public int Length {
        get {
            return length;
        }
    }

    public T this[int i] {
        get, own {
            native (return) {
                return data[ ARRAY_ACESS(v_i, f_length) ];
            }
        }
        set {
            native (source) {
                data[ ARRAY_ACESS(v_i, f_length) ] = v_value;
            }
        }
    }

    native (header) {
        GPtr<g_T>* data;
        lang_Array<g_T>* create(lang_int size, lang_bool init);
    }

    native (source) {
        template <typename g_T>
        lang_Array<g_T>* lang_Array<g_T>::create(lang_int size, lang_bool init) {
            lang_Object::create();
            this->data = sCast(GPtr<g_T>*, lang::memory::array(sizeof(GPtr<g_T>), size));

            if (this->data == nullptr) {
                this->f_length = 0;
            } else {
                this->f_length = size;
                if (init) {
                    for (long i = 0; i < size; i++) {
                        new (&this->data[i]) GPtr<g_T>(lang::value<GPtr<g_T>>::def());
                    }
                }
            }
            return this;
        }
    }

    native (extra) {
        template <typename A>
        struct array {
        };

        template <typename A>
        struct array<lang_Array<A>> {
            static lang_Array<A>* fill(lang_Array<A> * arr, const lang_int* count, lang_int pos) {
                lang_int len = count[pos];
                arr->create(len);
                return arr;
            }
        };

        template <typename A>
        struct array<lang_Array<lang_Array<A>>> {
            static lang_Array<lang_Array<A>>* fill(lang_Array<lang_Array<A>> * arr, const lang_int* count, lang_int pos) {
                lang_int len = count[pos];
                arr->create(len, false);

                for (lang_int i = 0; i < len; ++i) {
                    new (&arr->data[i]) GPtr<lang_Array<A>>(array<lang_Array<A>>::fill(new lang_Array<A>(), count, pos + 1));
                }

                return arr;
            }
        };
    }

    public this() {
        this.length = 0;

        native (source) {
            this->data = nullptr;
        }
    }

    public this(int length) {
        native (source) {
            this->data = sCast(GPtr<g_T>*, lang::memory::array(sizeof(GPtr<g_T>), v_length));

            if (this->data == nullptr) {
                this->f_length = 0;
            } else {
                this->f_length = v_length;
                for (long i = 0; i < v_length; i++) {
                    new (&this->data[i]) GPtr<g_T>(lang::value<GPtr<g_T>>::def());
                }
            }
        }
    }

    public ~this() {
        native (source) {
            lang::memory::dearray(this->data);
        }
    }
}