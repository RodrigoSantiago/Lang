namespace lang;

public class Array<T> : List<T> {

    private final int length;
    public int Length {
        get {
            return length;
        }
    }

    public T this[int i] {
        get, own {
            native (return) {
                return data[ ARRAY_ACESS(v_i, f_length) ];
            }
        }
        set {
            native (source) {
                data[ ARRAY_ACESS(v_i, f_length) ] = v_value;
            }
        }
    }

    native (header) {
        g_T* data;
        lang_Array<g_T>* create(g_T* list, lang_int size);
    }

    native (source) {
        template <typename g_T>
        lang_Array<g_T>* lang_Array<g_T>::create(g_T* list, lang_int size) {
            this->data = sCast(g_T*, lang::memory::array(sizeof(g_T), size));

            if (this->data == nullptr) {
                this->f_length = 0;
            } else {
                this->f_length = size;
                for (long i = 0; i < size; i++) {
                    this->data[i] = list[i];
                }
            }
            return this;
        }
    }

    public this() {
        this.length = 0;

        native (source) {
            this->data = nullptr;
        }
    }

    public this(int length) {
        native (source) {
            this->data = sCast(g_T*, lang::memory::array(sizeof(g_T), v_length));

            if (this->data == nullptr) {
                this->f_length = 0;
            } else {
                this->f_length = v_length;
                for (long i = 0; i < v_length; i++) {
                    this->data[i] = lang::generic<g_T>::def();
                }
            }
        }
    }

    public ~this() {
        native (source) {
            lang::memory::dearray(this->data);
        }
    }
}