namespace lang;

public final class Double {
    public final double value;

    public this(double value) {
        this.value = value;
    }

    public static long doubleToLongBits(double value) {
        native(return) {
            return reinterpret_cast<long long int>(v_value);
        }
    }

    public static double longBitsToDouble(long value) {
        native(return) {
            return reinterpret_cast<double>(v_value);
        }
    }

    public static Double parse(string s) {
        return parse(s, false);
    }

    public static Double parse(string s, bool hex) {
        return 0;
    }

    public static string toString(double value) {
        return "";
    }

    public static string toHexString(double value) {
        return "";
    }

    public string toString() {
        return toString(value);
    }

    public int hash() {
        return (int) doubleToLongBits(value);
    }

    public bool equals(let Object other) {
        let obj = (Double) other;
        return obj != null && obj.value == value;
    }
}

struct double : Double {

    private this() {
    }

    byte operator cast(double value) {
    }
    char operator cast(double value) {
    }
    short operator cast(double value) {
    }
    int operator cast(double value) {
    }
    long operator cast(double value) {
    }
    float operator cast(double value) {
    }

    bool operator ==(double value, double other) {
    }
    bool operator !=(double value, double other) {
    }
    bool operator >(double value, double other) {
    }
    bool operator <(double value, double other) {
    }
    bool operator >=(double value, double other) {
    }
    bool operator <=(double value, double other) {
    }

    double operator +(double value, double other) {
    }
    double operator -(double value, double other) {
    }
    double operator *(double value, double other) {
    }
    double operator /(double value, double other) {
    }

    double operator ++(double value) {
    }
    double operator --(double value) {
    }

    double operator +(double value) {
    }
    double operator -(double value) {
    }
}