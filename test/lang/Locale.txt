namespace lang;

public class Locale {

    public static locale global {
        get; set;
    }

    public final locale value;

    public this(locale value) {
        this.value = value;
    }

    public string toString() {
        return value.name;
    }

    public int hash() {
        return value.name.hash();
    }

    public bool equals(let Object other) {
        let obj = (Locale) other;
        return obj != null && obj.value == value;
    }
}

public struct locale : Locale {

    public final string name;
    public final string language;
    public final string country;
    public final string region;
    public final string codepage;

    private final function<int, int> fUpperCase;
    private final function<int, int> fLowerCase;
    private final function<bool, int> fIsUpperCase;
    private final function<bool, int> fIsLowerCase;
    private final function<bool, int> fIsDigit;
    private final function<bool, int> fIsLetter;
    private final function<bool, int> fIsNumber;
    private final function<bool, int> fIsSpace;
    private final function<bool, int> fIsWhiteSpace;

    private final function<string, date> fformatDate;
    private final function<string, long, long> fformatMoney;

    private this() {
    }

    public this(string language, string country, string region, string codepage,
            function<int, int> fUpperCase,
            function<int, int> fLowerCase,
            function<bool, int> fIsUpperCase,
            function<bool, int> fIsLowerCase,
            function<bool, int> fIsDigit,
            function<bool, int> fIsLetter,
            function<bool, int> fIsNumber,
            function<bool, int> fIsSpace,
            function<bool, int> fIsWhiteSpace,
            function<string, date> fformatDate,
            function<string, long, long> fformatMoney) {
            
        this.language = language;
        this.country = country;
        this.region = region;
        this.codepage = codepage;
        this.fUpperCase = fUpperCase;
        this.fLowerCase = fLowerCase;
        this.fIsUpperCase = fIsUpperCase;
        this.fIsLowerCase = fIsLowerCase;
        this.fIsDigit = fIsDigit;
        this.fIsLetter = fIsLetter;
        this.fIsNumber = fIsNumber;
        this.fIsSpace = fIsSpace;
        this.fIsWhiteSpace = fIsWhiteSpace;
        this.fformatDate = fformatDate;
        this.fformatMoney = fformatMoney;

        this.name = language;
        if (country != "") {
            name += "_" + country;
        }
        if (region != "") {
            name += "_" + region;
        }
        if (codepage != "") {
            name += "." + codepage;
        }
    }

    bool operator ==(locale value, locale other) {
        return value.name == other.name;
    }

    bool operator !=(locale value, locale other) {
        return value.name != other.name;
    }

    public string formatDate(date value) {
        return fformatDate ? fformatDate.call(value) : Date.toString(value);
    }

    public string formatMoney(long value, long decimal) {
        return fformatMoney ? fformatMoney.call(value, decimal) : Long.toString(value) + "." + Long.toString(decimal);
    }

    public int toUpperCase(int cp) {
        return fUpperCase ? fUpperCase.call(cp) : ((cp > 96 && cp < 123) ? cp - 32 : cp);
    }

    public int toLowerCase(int cp) {
        return fLowerCase ? fLowerCase.call(cp) : ((cp > 64 && cp < 91) ? cp + 32: cp);
    }

    public bool isUpperCase(int cp) {
        return fIsUpperCase ? fIsUpperCase.call(cp) : (cp > 64 && cp < 91);
    }

    public bool isLowerCase(int cp) {
        return fIsLowerCase ? fIsLowerCase.call(cp) : (cp > 96 && cp < 123);
    }

    public bool isDigit(int cp) {
        return fIsDigit ? fIsDigit.call(cp) : ((cp > 64 && cp < 91) || (cp > 96 && cp < 123) || (cp > 47 && cp < 58));
    }

    public bool isLetter(int cp) {
        return fIsLetter ? fIsLetter.call(cp) : ((cp > 64 && cp < 91) || (cp > 96 && cp < 123));
    }

    public bool isNumber(int cp) {
        return fIsNumber ? fIsNumber.call(cp) : (cp > 47 && cp < 58);
    }

    public bool isSpace(int cp) {
        return fIsSpace ? fIsSpace.call(cp) : cp == 32;
    }

    public bool isWhitespace(int cp) {
        return fIsWhiteSpace ? fIsWhiteSpace.call(cp) : (cp > 8 && cp < 14) || cp == 32;
    }
}
