namespace lang;

public class Long {
    public final long value;

    public this(long value) {
        this.value = value;
    }

    public static long parse(string s) {
        return parse(s, 10);
    }

    public static long parse(string s, int radix) {
        return 0;
    }

    public static string toString(long value) {
        return toString(value, 10);
    }

    public static string toString(long value, int radix) {
        return "0";
    }

    public string toString() {
        return toString(value);
    }

    public int hash() {
        return (int) value;
    }

    public bool equals(let Object other) {
        let obj = (Long) other;
        return obj != null && obj.value == value;
    }
}

public sync struct long : Long {

    private this() {
        // internal
    }

    byte operator cast(long value) {
        // internal
    }
    short operator cast(long value) {
        // internal
    }
    int operator cast(long value) {
        // internal
    }
    float operator auto(long value) {
        // internal
    }
    double operator auto(long value) {
        // internal
    }

    bool operator ==(long value, double other) {
        // internal
    }
    bool operator !=(long value, double other) {
        // internal
    }
    bool operator >(long value, double other) {
        // internal
    }
    bool operator <(long value, double other) {
        // internal
    }
    bool operator >=(long value, double other) {
        // internal
    }
    bool operator <=(long value, double other) {
        // internal
    }

    long operator +(long value, long other) {
        // internal
    }
    long operator -(long value, long other) {
        // internal
    }
    long operator *(long value, long other) {
        // internal
    }
    long operator /(long value, long other) {
        // internal
    }

    float operator +(long value, float other) {
        // internal
    }
    float operator -(long value, float other) {
        // internal
    }
    float operator *(long value, float other) {
        // internal
    }
    float operator /(long value, float other) {
        // internal
    }

    double operator +(long value, double other) {
        // internal
    }
    double operator -(long value, double other) {
        // internal
    }
    double operator *(long value, double other) {
        // internal
    }
    double operator /(long value, double other) {
        // internal
    }

    long operator %(long value, long other) {
        // internal
    }

    long operator ++(long value) {
        // internal
    }
    long operator --(long value) {
        // internal
    }

    long operator +(long value) {
        // internal
    }
    long operator -(long value) {
        // internal
    }

    long operator ~(long value) {
        // internal
    }

    long operator |(long value, long other) {
        // internal
    }
    long operator &(long value, long other) {
        // internal
    }
    long operator ^(long value, long other) {
        // internal
    }

    long operator >>(long value, long other) {
        // internal
    }
    long operator <<(long value, long other) {
        // internal
    }
}
